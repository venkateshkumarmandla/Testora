generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role         @default(STUDENT)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  courses       Course[]     @relation("InstructorCourses")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  description String       @db.Text
  price       Float
  thumbnail   String?
  featured    Boolean      @default(false)
  published   Boolean      @default(false)
  categoryId  String
  instructorId String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    Category     @relation(fields: [categoryId], references: [id])
  instructor  User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  enrollments Enrollment[]
  lessons     Lesson[]
  reviews     Review[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id              String           @id @default(cuid())
  userId          String
  courseId        String
  status          EnrollmentStatus @default(ACTIVE)
  progressPercent Float            @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonProgress  LessonProgress[]
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  courseId    String
  order       Int
  videoUrl    String?
  duration    Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]
}

model LessonProgress {
  id            String     @id @default(cuid())
  enrollmentId  String
  lessonId      String
  completed     Boolean    @default(false)
  watchedSeconds Int       @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson        Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, lessonId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
